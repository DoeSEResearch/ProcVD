{"idx": 442568, "project": "spice", "commit_id": "a4a16ac42d2f19a17e36556546aa94d5cd83745f", "project_url": "https://gitlab.freedesktop.org/spice/spice", "commit_url": "https://gitlab.freedesktop.org/spice/spice/commit/a4a16ac42d2f19a17e36556546aa94d5cd83745f", "commit_message": "memslot: Fix off-by-one error in group/slot boundary check\n\nRedMemSlotInfo keeps an array of groups, and each group contains an\narray of slots. Unfortunately, these checks are off by 1, they check\nthat the index is greater or equal to the number of elements in the\narray, while these arrays are 0 based. The check should only check for\nstrictly greater than the number of elements.\n\nFor the group array, this is not a big issue, as these memslot groups\nare created by spice-server users (eg QEMU), and the group ids used to\nindex that array are also generated by the spice-server user, so it\nshould not be possible for the guest to set them to arbitrary values.\n\nThe slot id is more problematic, as it's calculated from a QXLPHYSICAL\naddress, and such addresses are usually set by the guest QXL driver, so\nthe guest can set these to arbitrary values, including malicious values,\nwhich are probably easy to build from the guest PCI configuration.\n\nThis patch fixes the arrays bound check, and adds a test case for this.\nThis fixes CVE-2019-3813.\n\nSigned-off-by: Christophe Fergeau <cfergeau@redhat.com>\nAcked-by: Frediano Ziglio <fziglio@redhat.com>", "target": 0, "func": "from_physical(QXLPHYSICAL physical)\n{\n    return (void *)(uintptr_t) physical;\n}", "func_hash": 73444201551324965169559402369278614649, "file_name": "test-qxl-parsing.c", "file_hash": 299960477394170642599812441785708927040, "cwe": ["CWE-193"], "cve": "CVE-2019-3813", "cve_desc": "Spice, versions 0.5.2 through 0.14.1, are vulnerable to an out-of-bounds read due to an off-by-one error in memslot_get_virt. This may lead to a denial of service, or, in the worst case, code-execution by unauthenticated attackers.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2019-3813"}
{"idx": 292608, "project": "puma", "commit_id": "acdc3ae571dfae0e045cf09a295280127db65c7f", "project_url": "https://github.com/puma/puma", "commit_url": "https://github.com/puma/puma/commit/acdc3ae571dfae0e045cf09a295280127db65c7f", "commit_message": "Merge pull request from GHSA-48w2-rm65-62xx\n\n* Fix HTTP request smuggling vulnerability\n\nSee GHSA-48w2-rm65-62xx or CVE-2021-41136 for more info.\n\n* 4.3.9 release note\n\n* 5.5.1 release note\n\n* 5.5.1", "target": 0, "func": "int puma_parser_finish(puma_parser *parser)\n{\n  if (puma_parser_has_error(parser) ) {\n    return -1;\n  } else if (puma_parser_is_finished(parser) ) {\n    return 1;\n  } else {\n    return 0;\n  }\n}", "func_hash": 269921881390992728898038152610587497814, "file_name": "http11_parser.c", "file_hash": 310028467856200472681435734448209650249, "cwe": ["CWE-444"], "cve": "CVE-2021-41136", "cve_desc": "Puma is a HTTP 1.1 server for Ruby/Rack applications. Prior to versions 5.5.1 and 4.3.9, using `puma` with a proxy which forwards HTTP header values which contain the LF character could allow HTTP request smugggling. A client could smuggle a request through a proxy, causing the proxy to send a response back to another unknown client. The only proxy which has this behavior, as far as the Puma team is aware of, is Apache Traffic Server. If the proxy uses persistent connections and the client adds another request in via HTTP pipelining, the proxy may mistake it as the first request's body. Puma, however, would see it as two requests, and when processing the second request, send back a response that the proxy does not expect. If the proxy has reused the persistent connection to Puma to send another request for a different client, the second response from the first client will be sent to the second client. This vulnerability was patched in Puma 5.5.1 and 4.3.9. As a workaround, do not use Apache Traffic Server with `puma`.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2021-41136"}
{"idx": 386565, "project": "qcad", "commit_id": "1eeffc5daf5a06cf6213ffc19e95923cdebb2eb8", "project_url": "https://github.com/qcad/qcad", "commit_url": "https://github.com/qcad/qcad/commit/1eeffc5daf5a06cf6213ffc19e95923cdebb2eb8", "commit_message": "check vertexIndex which might be -1 for broken DXF", "target": 0, "func": "bool DL_Dxf::handleLWPolylineData(DL_CreationInterface* /*creationInterface*/) {\n    // Allocate LWPolyline vertices (group code 90):\n    if (groupCode==90) {\n        maxVertices = toInt(groupValue);\n        if (maxVertices>0) {\n            if (vertices!=NULL) {\n                delete[] vertices;\n            }\n            vertices = new double[4*maxVertices];\n            for (int i=0; i<maxVertices; ++i) {\n                vertices[i*4] = 0.0;\n                vertices[i*4+1] = 0.0;\n                vertices[i*4+2] = 0.0;\n                vertices[i*4+3] = 0.0;\n            }\n        }\n        vertexIndex=-1;\n        return true;\n    }\n\n    // Process LWPolylines vertices (group codes 10/20/30/42):\n    else if (groupCode==10 || groupCode==20 ||\n             groupCode==30 || groupCode==42) {\n\n        if (vertexIndex<maxVertices-1 && groupCode==10) {\n            vertexIndex++;\n        }\n\n        if (groupCode<=30) {\n            if (vertexIndex>=0 && vertexIndex<maxVertices && vertexIndex>=0) {\n                vertices[4*vertexIndex + (groupCode/10-1)] = toReal(groupValue);\n            }\n        } else if (groupCode==42 && vertexIndex<maxVertices && vertexIndex>=0) {\n            vertices[4*vertexIndex + 3] = toReal(groupValue);\n        }\n        return true;\n    }\n    return false;\n}", "func_hash": 66825183138389317029314964036422106221, "file_name": "dl_dxf.cpp", "file_hash": 181081005270076491555487324786328968837, "cwe": ["CWE-191"], "cve": "CVE-2021-21897", "cve_desc": "A code execution vulnerability exists in the DL_Dxf::handleLWPolylineData functionality of Ribbonsoft dxflib 3.17.0. A specially-crafted .dxf file can lead to a heap buffer overflow. An attacker can provide a malicious file to trigger this vulnerability.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2021-21897"}
{"idx": 211181, "project": "php-src", "commit_id": "a72cd07f2983dc43a6bb35209dc4687852e53c09", "project_url": "https://github.com/php/php-src", "commit_url": "http://git.php.net/?p=php-src.git;a=commit;h=a72cd07f2983dc43a6bb35209dc4687852e53c09", "commit_message": "Fixed bug #68665 (Invalid free)", "target": 1, "func": "apprentice_load(struct magic_set *ms, const char *fn, int action)\n{\n\tint errs = 0;\n\tuint32_t i, j;\n\tsize_t files = 0, maxfiles = 0;\n\tchar **filearr = NULL;\n\tstruct stat st;\n\tstruct magic_map *map;\n\tstruct magic_entry_set mset[MAGIC_SETS];\n\tphp_stream *dir;\n\tphp_stream_dirent d;\n \n\tTSRMLS_FETCH();\n\n\tmemset(mset, 0, sizeof(mset));\n\tms->flags |= MAGIC_CHECK;\t/* Enable checks for parsed files */\n\n\n\tif ((map = CAST(struct magic_map *, ecalloc(1, sizeof(*map)))) == NULL)\n\t{\n\t\tfile_oomem(ms, sizeof(*map));\n\t\treturn NULL;\n\t}\n\n\t/* print silly verbose header for USG compat. */\n\tif (action == FILE_CHECK)\n\t\t(void)fprintf(stderr, \"%s\\n\", usg_hdr);\n\n\t/* load directory or file */\n\t/* FIXME: Read file names and sort them to prevent\n\t   non-determinism. See Debian bug #488562. */\n\tif (php_sys_stat(fn, &st) == 0 && S_ISDIR(st.st_mode)) {\n\t\tint mflen;\n\t\tchar mfn[MAXPATHLEN];\n\n\t\tdir = php_stream_opendir((char *)fn, REPORT_ERRORS, NULL);\n\t\tif (!dir) {\n\t\t\terrs++;\n\t\t\tgoto out;\n\t\t}\n\t\twhile (php_stream_readdir(dir, &d)) {\n\t\t\tif ((mflen = snprintf(mfn, sizeof(mfn), \"%s/%s\", fn, d.d_name)) < 0) {\n\t\t\t\tfile_oomem(ms,\n\t\t\t\tstrlen(fn) + strlen(d.d_name) + 2);\n\t\t\t\terrs++;\n\t\t\t\tphp_stream_closedir(dir);\n\t\t\t\tgoto out;\n\t\t\t}\n\t\t\tif (stat(mfn, &st) == -1 || !S_ISREG(st.st_mode)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (files >= maxfiles) {\n\t\t\t\tsize_t mlen;\n\t\t\t\tmaxfiles = (maxfiles + 1) * 2;\n\t\t\t\tmlen = maxfiles * sizeof(*filearr);\n\t\t\t\tif ((filearr = CAST(char **,\n\t\t\t\t    erealloc(filearr, mlen))) == NULL) {\n\t\t\t\t\tfile_oomem(ms, mlen);\n\t\t\t\t\tefree(mfn);\n\t\t\t\t\tphp_stream_closedir(dir);\n\t\t\t\t\terrs++;\n\t\t\t\t\tgoto out;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfilearr[files++] = estrndup(mfn, (mflen > sizeof(mfn) - 1)? sizeof(mfn) - 1: mflen);\n\t\t}\n\t\tphp_stream_closedir(dir);\n\t\tqsort(filearr, files, sizeof(*filearr), cmpstrp);\n\t\tfor (i = 0; i < files; i++) {\n\t\t\tload_1(ms, action, filearr[i], &errs, mset);\n\t\t\tefree(filearr[i]);\n\t\t}\n\t\tefree(filearr);\n\t} else\n\t\tload_1(ms, action, fn, &errs, mset);\n\tif (errs)\n\t\tgoto out;\n\n\tfor (j = 0; j < MAGIC_SETS; j++) {\n\t\t/* Set types of tests */\n\t\tfor (i = 0; i < mset[j].count; ) {\n\t\t\tif (mset[j].me[i].mp->cont_level != 0) {\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ti = set_text_binary(ms, mset[j].me, mset[j].count, i);\n\t\t}\n\t\tqsort(mset[j].me, mset[j].count, sizeof(*mset[j].me),\n\t\t    apprentice_sort);\n\n\t\t/*\n\t\t * Make sure that any level 0 \"default\" line is last\n\t\t * (if one exists).\n\t\t */\n\t\tset_last_default(ms, mset[j].me, mset[j].count);\n\n\t\t/* coalesce per file arrays into a single one */\n\t\tif (coalesce_entries(ms, mset[j].me, mset[j].count,\n\t\t    &map->magic[j], &map->nmagic[j]) == -1) {\n\t\t\terrs++;\n\t\t\tgoto out;\n\t\t}\n\t}\n\nout:\n\tfor (j = 0; j < MAGIC_SETS; j++)\n\t\tmagic_entry_free(mset[j].me, mset[j].count);\n\n\tif (errs) {\n\t\tfor (j = 0; j < MAGIC_SETS; j++) {\n\t\t\tif (map->magic[j])\n\t\t\t\tefree(map->magic[j]);\n\t\t}\n\t\tefree(map);\n\t\treturn NULL;\n\t}\n\treturn map;\n}", "func_hash": 215852170840415887446784967790257485070, "file_name": "apprentice.c", "file_hash": 136822894511518552455761565191570256868, "cwe": ["CWE-17"], "cve": "CVE-2014-9426", "cve_desc": "The apprentice_load function in libmagic/apprentice.c in the Fileinfo component in PHP through 5.6.4 attempts to perform a free operation on a stack-based character array, which allows remote attackers to cause a denial of service (memory corruption or application crash) or possibly have unspecified other impact via unknown vectors.  NOTE: this is disputed by the vendor because the standard erealloc behavior makes the free operation unreachable", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2014-9426"}
{"idx": 215400, "project": "linux-2.6", "commit_id": "649f1ee6c705aab644035a7998d7b574193a598a", "project_url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6", "commit_url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=649f1ee6c705aab644035a7998d7b574193a598a", "commit_message": "hfsplus: check read_mapping_page() return value\n\nWhile testing more corrupted images with hfsplus, i came across\none which triggered the following bug:\n\n[15840.675016] BUG: unable to handle kernel paging request at fffffffb\n[15840.675016] IP: [<c0116a4f>] kmap+0x15/0x56\n[15840.675016] *pde = 00008067 *pte = 00000000\n[15840.675016] Oops: 0000 [#1] PREEMPT DEBUG_PAGEALLOC\n[15840.675016] Modules linked in:\n[15840.675016]\n[15840.675016] Pid: 11575, comm: ln Not tainted (2.6.27-rc4-00123-gd3ee1b4-dirty #29)\n[15840.675016] EIP: 0060:[<c0116a4f>] EFLAGS: 00010202 CPU: 0\n[15840.675016] EIP is at kmap+0x15/0x56\n[15840.675016] EAX: 00000246 EBX: fffffffb ECX: 00000000 EDX: cab919c0\n[15840.675016] ESI: 000007dd EDI: cab0bcf4 EBP: cab0bc98 ESP: cab0bc94\n[15840.675016]  DS: 007b ES: 007b FS: 0000 GS: 0033 SS: 0068\n[15840.675016] Process ln (pid: 11575, ti=cab0b000 task=cab919c0 task.ti=cab0b000)\n[15840.675016] Stack: 00000000 cab0bcdc c0231cfb 00000000 cab0bce0 00000800 ca9290c0 fffffffb\n[15840.675016]        cab145d0 cab919c0 cab15998 22222222 22222222 22222222 00000001 cab15960\n[15840.675016]        000007dd cab0bcf4 cab0bd04 c022cb3a cab0bcf4 cab15a6c ca9290c0 00000000\n[15840.675016] Call Trace:\n[15840.675016]  [<c0231cfb>] ? hfsplus_block_allocate+0x6f/0x2d3\n[15840.675016]  [<c022cb3a>] ? hfsplus_file_extend+0xc4/0x1db\n[15840.675016]  [<c022ce41>] ? hfsplus_get_block+0x8c/0x19d\n[15840.675016]  [<c06adde4>] ? sub_preempt_count+0x9d/0xab\n[15840.675016]  [<c019ece6>] ? __block_prepare_write+0x147/0x311\n[15840.675016]  [<c0161934>] ? __grab_cache_page+0x52/0x73\n[15840.675016]  [<c019ef4f>] ? block_write_begin+0x79/0xd5\n[15840.675016]  [<c022cdb5>] ? hfsplus_get_block+0x0/0x19d\n[15840.675016]  [<c019f22a>] ? cont_write_begin+0x27f/0x2af\n[15840.675016]  [<c022cdb5>] ? hfsplus_get_block+0x0/0x19d\n[15840.675016]  [<c0139ebe>] ? tick_program_event+0x28/0x4c\n[15840.675016]  [<c013bd35>] ? trace_hardirqs_off+0xb/0xd\n[15840.675016]  [<c022b723>] ? hfsplus_write_begin+0x2d/0x32\n[15840.675016]  [<c022cdb5>] ? hfsplus_get_block+0x0/0x19d\n[15840.675016]  [<c0161988>] ? pagecache_write_begin+0x33/0x107\n[15840.675016]  [<c01879e5>] ? __page_symlink+0x3c/0xae\n[15840.675016]  [<c019ad34>] ? __mark_inode_dirty+0x12f/0x137\n[15840.675016]  [<c0187a70>] ? page_symlink+0x19/0x1e\n[15840.675016]  [<c022e6eb>] ? hfsplus_symlink+0x41/0xa6\n[15840.675016]  [<c01886a9>] ? vfs_symlink+0x99/0x101\n[15840.675016]  [<c018a2f6>] ? sys_symlinkat+0x6b/0xad\n[15840.675016]  [<c018a348>] ? sys_symlink+0x10/0x12\n[15840.675016]  [<c01038bd>] ? sysenter_do_call+0x12/0x31\n[15840.675016]  =======================\n[15840.675016] Code: 00 00 75 10 83 3d 88 2f ec c0 02 75 07 89 d0 e8 12 56 05 00 5d c3 55 ba 06 00 00 00 89 e5 53 89 c3 b8 3d eb 7e c0 e8 16 74 00 00 <8b> 03 c1 e8 1e 69 c0 d8 02 00 00 05 b8 69 8e c0 2b 80 c4 02 00\n[15840.675016] EIP: [<c0116a4f>] kmap+0x15/0x56 SS:ESP 0068:cab0bc94\n[15840.675016] ---[ end trace 4fea40dad6b70e5f ]---\n\nThis happens because the return value of read_mapping_page() is passed on\nto kmap unchecked.  The bug is triggered after the first\nread_mapping_page() in hfsplus_block_allocate(), this patch fixes all\nthree usages in this functions but leaves the ones further down in the\nfile unchanged.\n\nSigned-off-by: Eric Sesterhenn <snakebyte@gmx.de>\nCc: Roman Zippel <zippel@linux-m68k.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>", "target": 1, "func": "int hfsplus_block_allocate(struct super_block *sb, u32 size, u32 offset, u32 *max)\n{\n\tstruct page *page;\n\tstruct address_space *mapping;\n\t__be32 *pptr, *curr, *end;\n\tu32 mask, start, len, n;\n\t__be32 val;\n\tint i;\n\n\tlen = *max;\n\tif (!len)\n\t\treturn size;\n\n\tdprint(DBG_BITMAP, \"block_allocate: %u,%u,%u\\n\", size, offset, len);\n\tmutex_lock(&HFSPLUS_SB(sb).alloc_file->i_mutex);\n\tmapping = HFSPLUS_SB(sb).alloc_file->i_mapping;\n\tpage = read_mapping_page(mapping, offset / PAGE_CACHE_BITS, NULL);\n\tpptr = kmap(page);\n\tcurr = pptr + (offset & (PAGE_CACHE_BITS - 1)) / 32;\n\ti = offset % 32;\n\toffset &= ~(PAGE_CACHE_BITS - 1);\n\tif ((size ^ offset) / PAGE_CACHE_BITS)\n\t\tend = pptr + PAGE_CACHE_BITS / 32;\n\telse\n\t\tend = pptr + ((size + 31) & (PAGE_CACHE_BITS - 1)) / 32;\n\n\t/* scan the first partial u32 for zero bits */\n\tval = *curr;\n\tif (~val) {\n\t\tn = be32_to_cpu(val);\n\t\tmask = (1U << 31) >> i;\n\t\tfor (; i < 32; mask >>= 1, i++) {\n\t\t\tif (!(n & mask))\n\t\t\t\tgoto found;\n\t\t}\n\t}\n\tcurr++;\n\n\t/* scan complete u32s for the first zero bit */\n\twhile (1) {\n\t\twhile (curr < end) {\n\t\t\tval = *curr;\n\t\t\tif (~val) {\n\t\t\t\tn = be32_to_cpu(val);\n\t\t\t\tmask = 1 << 31;\n\t\t\t\tfor (i = 0; i < 32; mask >>= 1, i++) {\n\t\t\t\t\tif (!(n & mask))\n\t\t\t\t\t\tgoto found;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurr++;\n\t\t}\n\t\tkunmap(page);\n\t\toffset += PAGE_CACHE_BITS;\n\t\tif (offset >= size)\n\t\t\tbreak;\n\t\tpage = read_mapping_page(mapping, offset / PAGE_CACHE_BITS,\n\t\t\t\t\t NULL);\n\t\tcurr = pptr = kmap(page);\n\t\tif ((size ^ offset) / PAGE_CACHE_BITS)\n\t\t\tend = pptr + PAGE_CACHE_BITS / 32;\n\t\telse\n\t\t\tend = pptr + ((size + 31) & (PAGE_CACHE_BITS - 1)) / 32;\n\t}\n\tdprint(DBG_BITMAP, \"bitmap full\\n\");\n\tstart = size;\n\tgoto out;\n\nfound:\n\tstart = offset + (curr - pptr) * 32 + i;\n\tif (start >= size) {\n\t\tdprint(DBG_BITMAP, \"bitmap full\\n\");\n\t\tgoto out;\n\t}\n\t/* do any partial u32 at the start */\n\tlen = min(size - start, len);\n\twhile (1) {\n\t\tn |= mask;\n\t\tif (++i >= 32)\n\t\t\tbreak;\n\t\tmask >>= 1;\n\t\tif (!--len || n & mask)\n\t\t\tgoto done;\n\t}\n\tif (!--len)\n\t\tgoto done;\n\t*curr++ = cpu_to_be32(n);\n\t/* do full u32s */\n\twhile (1) {\n\t\twhile (curr < end) {\n\t\t\tn = be32_to_cpu(*curr);\n\t\t\tif (len < 32)\n\t\t\t\tgoto last;\n\t\t\tif (n) {\n\t\t\t\tlen = 32;\n\t\t\t\tgoto last;\n\t\t\t}\n\t\t\t*curr++ = cpu_to_be32(0xffffffff);\n\t\t\tlen -= 32;\n\t\t}\n\t\tset_page_dirty(page);\n\t\tkunmap(page);\n\t\toffset += PAGE_CACHE_BITS;\n\t\tpage = read_mapping_page(mapping, offset / PAGE_CACHE_BITS,\n\t\t\t\t\t NULL);\n\t\tpptr = kmap(page);\n\t\tcurr = pptr;\n\t\tend = pptr + PAGE_CACHE_BITS / 32;\n\t}\nlast:\n\t/* do any partial u32 at end */\n\tmask = 1U << 31;\n\tfor (i = 0; i < len; i++) {\n\t\tif (n & mask)\n\t\t\tbreak;\n\t\tn |= mask;\n\t\tmask >>= 1;\n\t}\ndone:\n\t*curr = cpu_to_be32(n);\n\tset_page_dirty(page);\n\tkunmap(page);\n\t*max = offset + (curr - pptr) * 32 + i - start;\n\tHFSPLUS_SB(sb).free_blocks -= *max;\n\tsb->s_dirt = 1;\n\tdprint(DBG_BITMAP, \"-> %u,%u\\n\", start, *max);\nout:\n\tmutex_unlock(&HFSPLUS_SB(sb).alloc_file->i_mutex);\n\treturn start;\n}", "func_hash": 83147584987349782496711287280520974541, "file_name": "None", "file_hash": null, "cwe": ["CWE-20"], "cve": "CVE-2008-4934", "cve_desc": "The hfsplus_block_allocate function in fs/hfsplus/bitmap.c in the Linux kernel before 2.6.28-rc1 does not check a certain return value from the read_mapping_page function before calling kmap, which allows attackers to cause a denial of service (system crash) via a crafted hfsplus filesystem image.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2008-4934"}
{"idx": 473969, "project": "Onigmo", "commit_id": "ce13b17b955e0b6dfc6606b1fdbd4755590b360b", "project_url": "https://github.com/k-takata/Onigmo", "commit_url": "https://github.com/k-takata/Onigmo/commit/ce13b17b955e0b6dfc6606b1fdbd4755590b360b", "commit_message": "merge Ruby 1.9.2", "target": 0, "func": "big5_left_adjust_char_head(const UChar* start, const UChar* s, const UChar* end, OnigEncoding enc)\n{\n  const UChar *p;\n  int len;\n\n  if (s <= start) return (UChar* )s;\n  p = s;\n\n  if (BIG5_ISMB_TRAIL(*p)) {\n    while (p > start) {\n      if (! BIG5_ISMB_FIRST(*--p)) {\n\tp++;\n\tbreak;\n      }\n    }\n  }\n  len = enclen(enc, p, end);\n  if (p + len > s) return (UChar* )p;\n  p += len;\n  return (UChar* )(p + ((s - p) & ~1));\n}", "func_hash": 203498899591896505193385553914664220028, "file_name": "None", "file_hash": null, "cwe": [], "cve": "CVE-2019-16162", "cve_desc": "Onigmo through 6.2.0 has an out-of-bounds read in parse_char_class because of missing codepoint validation in regenc.c.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2019-16162"}
{"idx": 245162, "project": "percona-xtrabackup", "commit_id": "7742f875bb289a874246fb4653b7cd9f14b588fe", "project_url": "https://github.com/percona/percona-xtrabackup", "commit_url": "https://github.com/percona/percona-xtrabackup/commit/7742f875bb289a874246fb4653b7cd9f14b588fe", "commit_message": "PXB-2722 password is written into xtrabackup_info\nhttps://jira.percona.com/browse/PXB-2722\n\nAnalysis:\npassword passed with -p option is written into backup tool_command in xtrabackup_info\n\nFix:\nmask password before writting into xtrabackup_info", "target": 0, "func": "lock_binlog_maybe(MYSQL *connection, int timeout, int retry_count)\n{\n\tif (have_backup_locks && !opt_no_lock && !binlog_locked) {\n\t\tif (have_lock_wait_timeout) {\n\t\t\tchar query[200];\n\n\t\t\tut_snprintf(query, sizeof(query),\n\t\t\t\t    \"SET SESSION lock_wait_timeout=%d\",\n\t\t\t\t    timeout);\n\t\t}\n\n\t\tfor (int i = 0; i <= retry_count; ++i) {\n\t\t\tmsg_ts(\"Executing LOCK BINLOG FOR BACKUP...\\n\");\n\t\t\txb_mysql_query(connection, \"LOCK BINLOG FOR BACKUP\",\n\t\t\t\t       false, false);\n\t\t\tuint err = mysql_errno(connection);\n\t\t\tif (err == ER_LOCK_WAIT_TIMEOUT) {\n\t\t\t\tos_thread_sleep(1000000);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (err == 0) {\n\t\t\t\tbinlog_locked = true;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (!binlog_locked) {\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\treturn(true);\n\t}\n\n\treturn(false);\n}", "func_hash": 188113352076527566532402618543790528513, "file_name": "backup_mysql.cc", "file_hash": 197238246537877595322829817602483735583, "cwe": ["CWE-200"], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}
{"idx": 389731, "project": "vim", "commit_id": "1e56bda9048a9625bce6e660938c834c5c15b07d", "project_url": "https://github.com/vim/vim", "commit_url": "https://github.com/vim/vim/commit/1e56bda9048a9625bce6e660938c834c5c15b07d", "commit_message": "patch 9.0.0104: going beyond allocated memory when evaluating string constant\n\nProblem:    Going beyond allocated memory when evaluating string constant.\nSolution:   Properly skip over <Key> form.", "target": 0, "func": "tv_get_string_buf_chk(typval_T *varp, char_u *buf)\n{\n    return tv_get_string_buf_chk_strict(varp, buf, FALSE);\n}", "func_hash": 74272450257706896292701657727656548732, "file_name": "typval.c", "file_hash": 264686639878036499427248365468285871356, "cwe": ["CWE-125"], "cve": "CVE-2022-2580", "cve_desc": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0102.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2022-2580"}
{"idx": 336556, "project": "spice", "commit_id": "ca5bbc5692e052159bce1a75f55dc60b36078749", "project_url": "https://gitlab.freedesktop.org/spice/spice", "commit_url": "https://gitlab.freedesktop.org/spice/spice/-/commit/ca5bbc5692e052159bce1a75f55dc60b36078749", "commit_message": "With OpenSSL 1.1: Disable client-initiated renegotiation.\n\nFixes issue #49\nFixes BZ#1904459\n\nSigned-off-by: Julien Ropé <jrope@redhat.com>\nReported-by: BlackKD\nAcked-by: Frediano Ziglio <fziglio@redhat.com>", "target": 0, "func": "static void reds_link_free(RedLinkInfo *link)\n{\n    red_stream_free(link->stream);\n    link->stream = NULL;\n\n    g_free(link->link_mess);\n    link->link_mess = NULL;\n\n    BN_free(link->tiTicketing.bn);\n    link->tiTicketing.bn = NULL;\n\n    if (link->tiTicketing.rsa) {\n        RSA_free(link->tiTicketing.rsa);\n        link->tiTicketing.rsa = NULL;\n    }\n\n    g_free(link);\n}", "func_hash": 143255790856034149517340683705311652856, "file_name": "reds.cpp", "file_hash": 235495253173269534259417511409689982061, "cwe": ["NVD-CWE-Other"], "cve": "CVE-2021-20201", "cve_desc": "A flaw was found in spice in versions before 0.14.92. A DoS tool might make it easier for remote attackers to cause a denial of service (CPU consumption) by performing many renegotiations within a single connection.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2021-20201"}
{"idx": 293534, "project": "pjproject", "commit_id": "077b465c33f0aec05a49cd2ca456f9a1b112e896", "project_url": "https://github.com/pjsip/pjproject", "commit_url": "https://github.com/pjsip/pjproject/commit/077b465c33f0aec05a49cd2ca456f9a1b112e896", "commit_message": "Merge pull request from GHSA-7fw8-54cv-r7pm", "target": 0, "func": "PJ_DEF(void) pj_cis_del_range( pj_cis_t *cis, int cstart, int cend)\n{\n    while (cstart != cend) {\n        PJ_CIS_CLR(cis, cstart);\n        cstart++;\n    }\n}", "func_hash": 56079269152715878088847609139769191024, "file_name": "None", "file_hash": null, "cwe": ["CWE-125"], "cve": "CVE-2022-21723", "cve_desc": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In versions 2.11.1 and prior, parsing an incoming SIP message that contains a malformed multipart can potentially cause out-of-bound read access. This issue affects all PJSIP users that accept SIP multipart. The patch is available as commit in the `master` branch. There are no known workarounds.", "nvd_url": "https://nvd.nist.gov/vuln/detail/CVE-2022-21723"}
