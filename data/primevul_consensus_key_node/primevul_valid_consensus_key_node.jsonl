{"idx": 89024, "original_item": {"idx": 89024, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "void WebGraphicsContext3DDefaultImpl::activeTexture(unsigned long texture)\n{\n    if (texture < GL_TEXTURE0 || texture > GL_TEXTURE0+32)\n        return;\n\n    makeContextCurrent();\n    glActiveTexture(texture);\n}\n", "func_hash": 34448442419403439998385208344307439777, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "glActiveTexture(texture)", "code_reference": "glActiveTexture(texture)", "line_start": 0, "line_end": 0, "rationale": "Direct OpenGL state modification; incorrect usage could corrupt GPU state or cause instability.", "average_confidence": 0.94, "individual_confidences": [0.95, 0.9, 0.97], "confidence_std": 0.036, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:glactivetexture(texture):0-0"}, {"type": "C_", "name": "Texture unit bounds check", "code_reference": "if (texture < GL_TEXTURE0 || texture > GL_TEXTURE0+32)", "line_start": 0, "line_end": 0, "rationale": "Critical validation preventing invalid texture unit selection; silent failure could mask bugs but prevents exploitation.", "average_confidence": 0.925, "individual_confidences": [0.9, 0.95], "confidence_std": 0.035, "source_models": ["DeepSeek", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "C_:if(texturegl_texture0texturegl_texture032):0-0"}, {"type": "F_", "name": "makeContextCurrent()", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Ensures thread-safety and correct OpenGL context binding; failure could lead to undefined behavior or crashes.", "average_confidence": 0.893, "individual_confidences": [0.85, 0.85, 0.98], "confidence_std": 0.075, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:makecontextcurrent():0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 3, "total_nodes_after_filtering": 3, "confidence_threshold": 0.85, "average_confidence": 0.9193333333333333, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 89044, "original_item": {"idx": 89044, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "void WebGraphicsContext3DDefaultImpl::deleteProgram(unsigned program)\n{\n    makeContextCurrent();\n    glDeleteProgram(program);\n}\n", "func_hash": 270459651685122576941281771661365497313, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "makeContextCurrent", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Ensuring a valid and current OpenGL context is a fundamental prerequisite for safe OpenGL operations. Failure to do so can lead to context corruption, crashes, or unintended side effects affecting other OpenGL contexts. This function acts as a security mechanism by enforcing context validity.", "average_confidence": 0.95, "individual_confidences": [0.95, 0.95], "confidence_std": 0.0, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "F_:makecontextcurrent():0-0"}, {"type": "F_", "name": "OpenGL Resource Deletion", "code_reference": "glDeleteProgram(program)", "line_start": 0, "line_end": 0, "rationale": "Direct GPU memory operation; safe for invalid handles but could exploit driver vulnerabilities if program is attacker-controlled.", "average_confidence": 0.9, "individual_confidences": [0.85, 0.9, 0.95], "confidence_std": 0.05, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:gldeleteprogram(program):0-0"}, {"type": "P_", "name": "Shader Program Handle", "code_reference": "unsigned program", "line_start": 0, "line_end": 0, "rationale": "Untrusted handle input could trigger GPU driver bugs if maliciously crafted, though OpenGL typically handles invalid IDs safely.", "average_confidence": 0.89, "individual_confidences": [0.8, 0.98], "confidence_std": 0.127, "source_models": ["DeepSeek", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "P_:unsignedprogram:0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 3, "total_nodes_after_filtering": 3, "confidence_threshold": 0.85, "average_confidence": 0.9133333333333333, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 89056, "original_item": {"idx": 89056, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "unsigned long WebGraphicsContext3DDefaultImpl::getError()\n{\n    if (m_syntheticErrors.size() > 0) {\n        ListHashSet<unsigned long>::iterator iter = m_syntheticErrors.begin();\n        unsigned long err = *iter;\n        m_syntheticErrors.remove(iter);\n        return err;\n    }\n\n    makeContextCurrent();\n    return glGetError();\n}\n", "func_hash": 145731958671207858624541973329552715590, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "M_", "name": "Error code validation", "code_reference": "Entire function", "line_start": 0, "line_end": 0, "rationale": "Critical missing element. Lack of validation on both synthetic and OpenGL error codes could allow propagation of arbitrary or malicious values.", "average_confidence": 0.935, "individual_confidences": [0.92, 0.95], "confidence_std": 0.021, "source_models": ["DeepSeek", "DeepSeek"], "model_count": 2, "node_key": "M_:entirefunction:0-0"}, {"type": "F_", "name": "makeContextCurrent", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Critical for ensuring valid OpenGL context state. Failure may lead to incorrect error reporting, potentially masking real issues or returning misleading results.", "average_confidence": 0.933, "individual_confidences": [0.9, 0.95, 0.95], "confidence_std": 0.029, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:makecontextcurrent():0-0"}, {"type": "V_", "name": "m_syntheticErrors", "code_reference": "m_syntheticErrors", "line_start": 2, "line_end": 4, "rationale": "This variable holds synthetic error codes. If these codes are influenced by external input or are not properly managed, it could become a vector for injecting arbitrary return values, circumventing security checks. Improper memory management with the list may also lead to exploitable conditions.", "average_confidence": 0.875, "individual_confidences": [0.85, 0.9], "confidence_std": 0.035, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "V_:m_syntheticerrors:0-0"}, {"type": "F_", "name": "m_syntheticErrors.remove", "code_reference": "m_syntheticErrors.remove(iter)", "line_start": 0, "line_end": 0, "rationale": "Critical due to potential iterator invalidation if container is modified concurrently. Could lead to memory safety violations.", "average_confidence": 0.86, "individual_confidences": [0.88, 0.8, 0.9], "confidence_std": 0.053, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:m_syntheticerrorsremove(iter):0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 5, "total_nodes_after_filtering": 4, "confidence_threshold": 0.85, "average_confidence": 0.90075, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 89058, "original_item": {"idx": 89058, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "void WebGraphicsContext3DDefaultImpl::getIntegerv(unsigned long pname, int* value)\n{\n    makeContextCurrent();\n    switch (pname) {\n    case IMPLEMENTATION_COLOR_READ_FORMAT:\n        *value = GL_RGB;\n        break;\n    case IMPLEMENTATION_COLOR_READ_TYPE:\n        *value = GL_UNSIGNED_BYTE;\n        break;\n    case MAX_FRAGMENT_UNIFORM_VECTORS:\n        glGetIntegerv(GL_MAX_FRAGMENT_UNIFORM_COMPONENTS, value);\n        *value /= 4;\n        break;\n    case MAX_VERTEX_UNIFORM_VECTORS:\n        glGetIntegerv(GL_MAX_VERTEX_UNIFORM_COMPONENTS, value);\n        *value /= 4;\n        break;\n    case MAX_VARYING_VECTORS:\n        glGetIntegerv(GL_MAX_VARYING_FLOATS, value);\n        *value /= 4;\n        break;\n    default:\n        glGetIntegerv(pname, value);\n    }\n}\n", "func_hash": 20038968935769492867914416152363644731, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "P_", "name": "value", "code_reference": "int* value", "line_start": 0, "line_end": 0, "rationale": "Raw output pointer; missing null check risks null dereference or memory corruption.", "average_confidence": 0.985, "individual_confidences": [1.0, 0.97], "confidence_std": 0.021, "source_models": ["DeepSeek", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "P_:intvalue:0-0"}, {"type": "F_", "name": "makeContextCurrent()", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Ensures correct OpenGL context is active; missing thread safety could lead to TOCTOU issues.", "average_confidence": 0.917, "individual_confidences": [0.9, 0.9, 0.95], "confidence_std": 0.029, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:makecontextcurrent():0-0"}, {"type": "P_", "name": "pname", "code_reference": "unsigned long pname", "line_start": 0, "line_end": 0, "rationale": "Untrusted input controlling OpenGL state queries; potential info leak if invalid values are allowed.", "average_confidence": 0.89, "individual_confidences": [0.8, 0.98], "confidence_std": 0.127, "source_models": ["DeepSeek", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "P_:unsignedlongpname:0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 4, "total_nodes_after_filtering": 3, "confidence_threshold": 0.85, "average_confidence": 0.9306666666666666, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 89062, "original_item": {"idx": 89062, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "WebString WebGraphicsContext3DDefaultImpl::getShaderSource(WebGLId shader)\n{\n    makeContextCurrent();\n\n    ShaderSourceMap::iterator result = m_shaderSourceMap.find(shader);\n    if (result != m_shaderSourceMap.end()) {\n        ShaderSourceEntry* entry = result->second;\n        ASSERT(entry);\n        if (!entry->source)\n            return WebString();\n        WebString res = WebString::fromUTF8(entry->source, strlen(entry->source));\n        return res;\n    }\n\n    GLint logLength = 0;\n    glGetShaderiv(shader, GL_SHADER_SOURCE_LENGTH, &logLength);\n    if (logLength <= 1)\n        return WebString();\n    GLchar* log = 0;\n    if (!tryFastMalloc(logLength * sizeof(GLchar)).getValue(log))\n        return WebString();\n    GLsizei returnedLogLength;\n    glGetShaderSource(shader, logLength, &returnedLogLength, log);\n    ASSERT(logLength == returnedLogLength + 1);\n    WebString res = WebString::fromUTF8(log, returnedLogLength);\n    fastFree(log);\n    return res;\n}\n", "func_hash": 308242398566707613154201390026702380527, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "M_", "name": "missing shader validation", "code_reference": "N/A", "line_start": 0, "line_end": 0, "rationale": "Absence of shader parameter validation enables potential cache poisoning or invalid OpenGL operations.", "average_confidence": 0.925, "individual_confidences": [0.95, 0.9], "confidence_std": 0.035, "source_models": ["DeepSeek", "DeepSeek"], "model_count": 2, "node_key": "M_:na:0-0"}, {"type": "F_", "name": "makeContextCurrent()", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Ensures correct OpenGL context is active; failure could lead to undefined behavior or incorrect shader operations.", "average_confidence": 0.9, "individual_confidences": [0.9, 0.9], "confidence_std": 0.0, "source_models": ["DeepSeek", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "F_:makecontextcurrent():0-0"}, {"type": "F_", "name": "glGetShaderiv", "code_reference": "glGetShaderiv(shader, GL_SHADER_SOURCE_LENGTH, &logLength);", "line_start": 15, "line_end": 15, "rationale": "This OpenGL call retrieves the shader source length. A compromised driver can return an incorrect 'logLength', leading to DoS by excessive memory allocation, or buffer overflows later on. shader is an external input.", "average_confidence": 0.875, "individual_confidences": [0.85, 0.9], "confidence_std": 0.035, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "F_:glgetshaderiv(shader,gl_shader_source_length,loglength):10-10"}, {"type": "F_", "name": "m_shaderSourceMap.find", "code_reference": "m_shaderSourceMap.find(shader)", "line_start": 4, "line_end": 4, "rationale": "This function performs a lookup based on the 'shader' ID. While the map itself is likely robust, an invalid ID can lead to incorrect control flow and use of stale or incorrect shader sources. The map might be influenced by other code that handles shader management.", "average_confidence": 0.85, "individual_confidences": [0.8, 0.9], "confidence_std": 0.071, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "F_:m_shadersourcemapfind(shader):0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 5, "total_nodes_after_filtering": 4, "confidence_threshold": 0.85, "average_confidence": 0.8875, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 89074, "original_item": {"idx": 89074, "project": "Chrome", "commit_id": "327585cb0eab0859518643a2d00917081f7e7645", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/327585cb0eab0859518643a2d00917081f7e7645", "commit_message": "None", "target": 0, "func": "void WebGraphicsContext3DDefaultImpl::renderbufferStorage(unsigned long target,\n                                                          unsigned long internalformat,\n                                                          unsigned long width,\n                                                          unsigned long height)\n{\n    makeContextCurrent();\n    switch (internalformat) {\n    case GL_DEPTH_STENCIL:\n        internalformat = GL_DEPTH24_STENCIL8_EXT;\n        break;\n    case GL_DEPTH_COMPONENT16:\n        internalformat = GL_DEPTH_COMPONENT;\n        break;\n    case GL_RGBA4:\n    case GL_RGB5_A1:\n        internalformat = GL_RGBA;\n        break;\n    case 0x8D62: // GL_RGB565\n        internalformat = GL_RGB;\n        break;\n    }\n    glRenderbufferStorageEXT(target, internalformat, width, height);\n}\n", "func_hash": 241440985497813490563451809323986753306, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "glRenderbufferStorageEXT", "code_reference": "glRenderbufferStorageEXT(target, internalformat, width, height)", "line_start": 18, "line_end": 18, "rationale": "This function directly interacts with the OpenGL driver and allocates memory. Improperly validated inputs (width, height) can cause integer overflows leading to heap corruption and exploitable vulnerabilities. The driver itself might have vulnerabilities that could be triggered by specific input combinations.", "average_confidence": 0.98, "individual_confidences": [0.98, 0.98], "confidence_std": 0.0, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "F_:glrenderbufferstorageext(target,internalformat,width,height):10-10"}, {"type": "F_", "name": "Context Activation", "code_reference": "makeContextCurrent()", "line_start": 0, "line_end": 0, "rationale": "Ensures correct OpenGL context is active; failure could lead to cross-context data leaks or corruption.", "average_confidence": 0.95, "individual_confidences": [0.95, 0.95, 0.95], "confidence_std": 0.0, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:makecontextcurrent():0-0"}, {"type": "C_", "name": "switch (internalformat)", "code_reference": "switch (internalformat)", "line_start": 5, "line_end": 17, "rationale": "The switch statement controls the internal format used for the renderbuffer. Incorrect or incomplete handling of different formats can result in memory corruption, buffer overflows, or denial-of-service.  It affects data flow and directly influences the allocation and interpretation of memory within the renderbuffer. The lack of a 'default' case makes the function vulnerable to unexpected values of internalformat.", "average_confidence": 0.875, "individual_confidences": [0.85, 0.9], "confidence_std": 0.035, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "C_:switch(internalformat):0-10"}], "consensus_statistics": {"total_nodes_before_filtering": 3, "total_nodes_after_filtering": 3, "confidence_threshold": 0.85, "average_confidence": 0.9349999999999999, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 90049, "original_item": {"idx": 90049, "project": "Chrome", "commit_id": "123e68f88fd0ed4f7447ba81148f9b619b947c47", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/123e68f88fd0ed4f7447ba81148f9b619b947c47", "commit_message": "None", "target": 0, "func": "DataObjectItem* DataObjectItem::CreateFromString(const String& type,\n                                                 const String& data) {\n  DataObjectItem* item =\n      MakeGarbageCollected<DataObjectItem>(kStringKind, type);\n  item->data_ = data;\n  return item;\n}\n", "func_hash": 323262134580825081575295001605614819880, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "M_", "name": "Input Validation", "code_reference": "N/A", "line_start": 0, "line_end": 0, "rationale": "The complete absence of input validation on both `type` and `data` is a fundamental security flaw, enabling injection attacks and DoS. This missing element is the root cause of several potential vulnerabilities. Highest confidence, as the lack of validation is a glaring issue.", "average_confidence": 1.0, "individual_confidences": [1.0], "confidence_std": 0.0, "source_models": ["Gemini-2.0-Flash"], "model_count": 1, "node_key": "M_:na:0-0"}, {"type": "V_", "name": "item->data_ assignment", "code_reference": "item->data_ = data", "line_start": 0, "line_end": 0, "rationale": "Critical data flow; direct assignment without validation could corrupt internal state or lead to injection if 'data' is attacker-controlled.", "average_confidence": 0.95, "individual_confidences": [0.95], "confidence_std": 0.0, "source_models": ["DeepSeek"], "model_count": 1, "node_key": "V_:itemdata_data:0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 2, "total_nodes_after_filtering": 2, "confidence_threshold": 0.85, "average_confidence": 0.975, "models_with_data": ["deepseek", "gemini"], "model_count": 2}}
{"idx": 95572, "original_item": {"idx": 95572, "project": "Chrome", "commit_id": "957973753ec4159003ff7930d946b7e89c7e09f3", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/957973753ec4159003ff7930d946b7e89c7e09f3", "commit_message": "None", "target": 0, "func": "bool BlobURLRequestJob::ReadFile(const BlobData::Item& item) {\n  DCHECK(stream_.get());\n  DCHECK(stream_->IsOpen());\n  DCHECK(read_buf_remaining_bytes_ >= bytes_to_read_);\n\n  int rv = stream_->Read(read_buf_->data() + read_buf_offset_,\n                         bytes_to_read_,\n                         &io_callback_);\n\n  if (rv == net::ERR_IO_PENDING) {\n    SetStatus(net::URLRequestStatus(net::URLRequestStatus::IO_PENDING, 0));\n    return false;\n  }\n\n  if (rv < 0) {\n    NotifyFailure(net::ERR_FAILED);\n    return false;\n  }\n\n  if (GetStatus().is_io_pending())\n    DidRead(rv);\n  else\n    AdvanceBytesRead(rv);\n\n  return true;\n}\n", "func_hash": 323457758710923424581881672078994379811, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "Error Notification", "code_reference": "NotifyFailure(net::ERR_FAILED)", "line_start": 14, "line_end": 17, "rationale": "Generic error reporting obscures root causes, making debugging and security incident response more difficult.", "average_confidence": 0.8, "individual_confidences": [0.85, 0.75], "confidence_std": 0.071, "source_models": ["DeepSeek", "Gemini-2.0-Flash"], "model_count": 2, "node_key": "F_:notifyfailure(neterr_failed):10-10"}], "consensus_statistics": {"total_nodes_before_filtering": 1, "total_nodes_after_filtering": 1, "confidence_threshold": 0.85, "average_confidence": 0.8, "models_with_data": ["deepseek", "gemini"], "model_count": 2}}
{"idx": 95575, "original_item": {"idx": 95575, "project": "Chrome", "commit_id": "957973753ec4159003ff7930d946b7e89c7e09f3", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/957973753ec4159003ff7930d946b7e89c7e09f3", "commit_message": "None", "target": 0, "func": "bool BlobURLRequestJob::ReadRawData(net::IOBuffer* dest,\n                                    int dest_size,\n                                    int* bytes_read) {\n  DCHECK_NE(dest_size, 0);\n  DCHECK(bytes_read);\n  DCHECK_GE(remaining_bytes_, 0);\n\n  if (error_) {\n    *bytes_read = 0;\n    return true;\n  }\n\n  if (remaining_bytes_ < dest_size)\n    dest_size = static_cast<int>(remaining_bytes_);\n\n  if (!dest_size) {\n    *bytes_read = 0;\n    return true;\n  }\n\n  DCHECK(!read_buf_);\n  read_buf_ = dest;\n  read_buf_offset_ = 0;\n  read_buf_size_ = dest_size;\n  read_buf_remaining_bytes_ = dest_size;\n\n  return ReadLoop(bytes_read);\n}\n", "func_hash": 150849546399000452089091594844805915019, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "Read delegation", "code_reference": "ReadLoop(bytes_read)", "line_start": 22, "line_end": 22, "rationale": "Security boundary where actual data transfer occurs, dependent on proper state setup.", "average_confidence": 0.975, "individual_confidences": [0.95, 1.0], "confidence_std": 0.035, "source_models": ["DeepSeek", "Gemini-2.0-Flash"], "model_count": 2, "node_key": "F_:readloop(bytes_read):20-20"}, {"type": "M_", "name": "Release-build input validation", "code_reference": "", "line_start": 0, "line_end": 0, "rationale": "Missing production-grade validation equivalent to debug checks.", "average_confidence": 0.85, "individual_confidences": [0.9, 0.85, 0.8], "confidence_std": 0.05, "source_models": ["DeepSeek", "DeepSeek", "DeepSeek"], "model_count": 3, "node_key": "M_::0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 2, "total_nodes_after_filtering": 2, "confidence_threshold": 0.85, "average_confidence": 0.9125, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
{"idx": 96965, "original_item": {"idx": 96965, "project": "Chrome", "commit_id": "de5aa214ea77b3d2c4ff8a0c58f446896c107ce0", "project_url": "https://github.com/chromium/chromium", "commit_url": "https://github.com/chromium/chromium/commit/de5aa214ea77b3d2c4ff8a0c58f446896c107ce0", "commit_message": "None", "target": 0, "func": "TranslateInfoBarDelegate* TranslateManager::GetTranslateInfoBarDelegate(\n    TabContents* tab) {\n  for (int i = 0; i < tab->infobar_delegate_count(); ++i) {\n    TranslateInfoBarDelegate* delegate =\n        tab->GetInfoBarDelegateAt(i)->AsTranslateInfoBarDelegate();\n    if (delegate)\n      return delegate;\n  }\n  return NULL;\n}\n", "func_hash": 320167623959162681601579944879934982241, "file_name": "None", "file_hash": null, "cwe": [], "cve": "None", "cve_desc": "None", "nvd_url": "https://nvd.nist.gov/vuln/detail/None"}, "consensus_nodes": [{"type": "F_", "name": "infobar_delegate_count() call", "code_reference": "tab->infobar_delegate_count()", "line_start": 0, "line_end": 0, "rationale": "Untrusted count could lead to out-of-bounds access or infinite loop.", "average_confidence": 0.917, "individual_confidences": [0.9, 0.9, 0.95], "confidence_std": 0.029, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:tabinfobar_delegate_count():0-0"}, {"type": "F_", "name": "GetInfoBarDelegateAt(i) call", "code_reference": "tab->GetInfoBarDelegateAt(i)", "line_start": 0, "line_end": 0, "rationale": "Potential out-of-bounds access if count is corrupted or invalid.", "average_confidence": 0.917, "individual_confidences": [0.85, 0.95, 0.95], "confidence_std": 0.058, "source_models": ["DeepSeek", "Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 3, "node_key": "F_:tabgetinfobardelegateat(i):0-0"}, {"type": "F_", "name": "AsTranslateInfoBarDelegate() call", "code_reference": "delegate->AsTranslateInfoBarDelegate()", "line_start": 0, "line_end": 0, "rationale": "Unsafe downcasting could lead to type confusion attacks.", "average_confidence": 0.85, "individual_confidences": [0.8, 0.9], "confidence_std": 0.071, "source_models": ["DeepSeek", "Gemini-2.0-Flash"], "model_count": 2, "node_key": "F_:delegateastranslateinfobardelegate():0-0"}, {"type": "C_", "name": "if (delegate)", "code_reference": "if (delegate)", "line_start": 6, "line_end": 6, "rationale": "This check is supposed to prevent dereferencing NULL pointers. However, it's insufficient if the cast returns a non-NULL but invalid pointer (e.g., a dangling pointer), potentially leading to further issues.", "average_confidence": 0.85, "individual_confidences": [0.75, 0.95], "confidence_std": 0.141, "source_models": ["Gemini-2.0-Flash", "Qwen2.5-Coder-32B"], "model_count": 2, "node_key": "C_:if(delegate):0-0"}], "consensus_statistics": {"total_nodes_before_filtering": 4, "total_nodes_after_filtering": 4, "confidence_threshold": 0.85, "average_confidence": 0.8835, "models_with_data": ["deepseek", "gemini", "qwen"], "model_count": 3}}
