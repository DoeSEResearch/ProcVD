import ast

def extract_lines(data_list, start, end):
    """
    Extracts lines from a list of added/deleted lines based on the provided start and end line numbers.
    """
    result = []
    for line_num, code in data_list:
        if start <= line_num <= end:
            result.append(code)
    return result

def extract_vulnerability_lines(vuln_diff_str, start_line, end_line):
    """
    Parses the vulnerability difference string and extracts the fix lines and vulnerability lines based on the provided line range.
    """
    try:
        # Parse the vulnerability difference string into a dictionary
        vuln_diff = ast.literal_eval(vuln_diff_str)

        # Extract added lines (fix lines)
        added_lines = extract_lines(vuln_diff.get('added', []), start_line, end_line)

        # Extract deleted lines (vulnerability lines)
        deleted_lines = extract_lines(vuln_diff.get('deleted', []), start_line, end_line)

        return {
            "fix_line": added_lines,
            "vulnerability_line": deleted_lines
        }
    except Exception as e:
        print(f"Parsing error: {e}")
        return {
            "fix_line": [],
            "vulnerability_line": []
        }
